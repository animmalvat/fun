{"version":3,"sources":["NavBar.js","Weather.js","Time.js","News.js","Quote.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","list","onClick","closedDrawer","List","map","item","i","ListItem","key","button","style","width","Typography","variant","marginLeft","state","open","openDrawer","bind","handleClose","toggleDrawer","this","setState","console","log","AppBar","position","Drawer","onClose","Grid","container","direction","justify","alignItems","title","IconButton","fill","xs","window","location","href","React","Component","Weather","loading","weather","dt","Date","endt","setHours","getHours","toISOString","fetch","headers","then","response","json","jsonData","Card","CardContent","justifyContent","CircularProgress","hours","airTemperature","noaa","windSpeed","humidity","precipitation","visibility","Time","tick","res","result","datetime","split","clock","setInterval","String","padStart","getMinutes","News","getNews","url","input","news","printNews","results","slice","data","webUrl","textDecoration","webTitle","Quote","quote","Body","Container","paddingTop","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.babf9644.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GithubIcon from '@material-ui/icons/GitHub';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ToolTip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nexport default class NavBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n        this.openDrawer = this.openDrawer.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.toggleDrawer = this.toggleDrawer.bind(this);\r\n        this.closedDrawer = this.toggleDrawer.bind(this);\r\n    }\r\n    list = () => {\r\n        var itemlist = [\"Home\", \"Github\", \"Profile\", \"About us\"];\r\n        return(\r\n            <div onClick={this.closedDrawer}>\r\n                <List>\r\n                    {itemlist.map( (item, i)=> (\r\n                        <ListItem key={i} button style={{width: 300}}>\r\n                                <Typography variant=\"h6\" style={{marginLeft: 20}}>\r\n                                    {item}\r\n                                </Typography>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            open: false\r\n        })\r\n    }\r\n\r\n    openDrawer() {\r\n        this.setState({\r\n            open: true\r\n        })\r\n    }\r\n\r\n    toggleDrawer() {\r\n        this.setState({\r\n            open: !this.state.open\r\n        })\r\n    }\r\n\r\n    closedDrawer() {\r\n        console.log('closed Drawer');\r\n        this.setState({\r\n            open: false\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <AppBar position=\"static\">\r\n                    <Drawer open={this.state.open} onClose = {this.closedDrawer} >\r\n                        {this.list()}\r\n                    </Drawer>\r\n                    <ToolBar>\r\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                            <Grid>\r\n                                <ToolTip title=\"Menu\">\r\n                                    <IconButton onClick = {this.openDrawer}>\r\n                                        <MenuIcon style={{fill: \"white\"}}/>\r\n                                    </IconButton>\r\n                                </ToolTip>\r\n                            </Grid>\r\n                            <Grid item xs={11}>\r\n                                <Typography variant=\"h6\">\r\n                                    Fun with APIs\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid>\r\n                                <ToolTip title=\"Github link\">\r\n                                    <IconButton onClick={()=>{window.location.href = \"https://github.com/animmalvat/project\"; return;}}>\r\n                                        <GithubIcon style={{ fill: \"white\" }} />\r\n                                    </IconButton>\r\n                                </ToolTip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ToolBar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport default class Weather extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            weather: {}\r\n        }\r\n        // this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        //setting up the parameters for the api\r\n        const lat = 42;\r\n        const lng = -83;\r\n        const params = 'windSpeed,humidity,precipitation,visibility,airTemperature';\r\n\r\n        //setting starting date and ending date\r\n        var dt = new Date();\r\n        var endt = new Date();\r\n        endt.setHours(dt.getHours() + 2);\r\n        endt = endt.toISOString();\r\n        dt = dt.toISOString();\r\n        \r\n        //calling api using fetch method\r\n        fetch(`https://api.stormglass.io/v2/weather/point?lat=${lat}&lng=${lng}&params=${params}&start=${dt}\r\n        &end=${endt}`,{\r\n        //it is unsafe to use api key here but for demonstration purpose we have used it here\r\n        headers: {\r\n            'Authorization': 'fae21386-69a6-11ea-a6ce-0242ac130002-fae21476-69a6-11ea-a6ce-0242ac130002'\r\n        }\r\n        }).then((response) => response.json()).then((jsonData) => {\r\n            this.setState({\r\n                loading: false,\r\n                weather: jsonData\r\n            })\r\n        });\r\n    }\r\n\r\n    render(){\r\n        //check if the data has been loaded or not\r\n        if(!this.state.loading){\r\n            return(\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">\r\n                            Weather\r\n                        </Typography>\r\n                        <div>\r\n                            <Typography>\r\n                                Temperature: {this.state.weather.hours[0].airTemperature.noaa} C <br></br>\r\n                                Wind Speed: {this.state.weather.hours[0].windSpeed.noaa} m/s <br></br>\r\n                                Humidity: {this.state.weather.hours[0].humidity.noaa} % <br></br>\r\n                                Precipitation: {this.state.weather.hours[0].precipitation.noaa} kg/m<sup>2</sup> <br></br>\r\n                                Visibility: {this.state.weather.hours[0].visibility.noaa} km <br></br>\r\n                            </Typography>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return(\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" >\r\n                            Weather\r\n                        </Typography>\r\n                        <div style={{justifyContent: \"center\"}}>\r\n                            <CircularProgress />\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nexport default class Time extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            clock: new Date()\r\n        }\r\n        setInterval(this.tick, 60000);\r\n    }\r\n\r\n    tick = () => {\r\n        fetch(\"http://worldtimeapi.org/api/ip\")\r\n            .then(res=>res.json())\r\n                .then((result)=>{\r\n                    console.log(result.datetime);\r\n                    var dt = result.datetime.split(\"+\");\r\n                    this.setState({\r\n                        clock: new Date(dt[0])\r\n                    })\r\n            })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Card variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography variant=\"h6\">\r\n                        Good Morning\r\n                    </Typography>\r\n                    <div>\r\n                        <Typography variant=\"h5\">\r\n                            {String(this.state.clock.getHours()).padStart(2, '0')} : {String(this.state.clock.getMinutes()).padStart(2,'0')}\r\n                        </Typography>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nexport default class News extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            news: {},\r\n            \"input\": \"\",\r\n            loading: true\r\n        }\r\n        this.getNews();\r\n    }\r\n\r\n    getNews = () => {\r\n        var url = \"https://content.guardianapis.com/search?q=\"+ this.state.input +\"&api-key=d09d67a8-2c3e-461f-be77-788f360a0160\"\r\n        fetch(url).then((response)=>response.json())\r\n        .then((result)=>{\r\n            console.log(result);\r\n            this.setState({\r\n                news: result,\r\n                \"input\": \"\",    \r\n                loading: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    printNews = () => {\r\n        var hela = ['a', 'n', 'i', 'm'];\r\n        return(this.state.news.response.results.slice(0,4).map((data, i)=>(\r\n            <p>\r\n                <a href={data.webUrl} style={{textDecoration: \"none\"}} key={i}> {data.webTitle} </a>\r\n            </p>)))\r\n    }\r\n\r\n    render(){\r\n        if(this.state.loading) {\r\n            return(\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        <div>\r\n                            <Typography variant=\"h5\">\r\n                                <CircularProgress/>\r\n                            </Typography>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return(\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        <div>\r\n                            <Typography >\r\n                                { this.printNews() }\r\n                            </Typography>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default class Quote extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: \"\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Card variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography variant=\"h6\">\r\n                        Quote of the day\r\n                    </Typography>\r\n                    <div>\r\n                        <Typography variant=\"h5\">\r\n                            {this.state.quote}\r\n                        </Typography>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Weather from './Weather';\r\nimport Time from './Time';\r\nimport News from './News';\r\nimport Quote from './Quote';\r\n\r\nexport default class Body extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clock: new Date(\"22:30\")\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <Grid style={{paddingTop: \"4%\"}} container justify=\"space-evenly\">\r\n                    <Grid>\r\n                        <Time/>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Weather />\r\n                    </Grid>\r\n                    <Grid>\r\n                        <News />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid style={{paddingTop: \"4%\"}} container justify=\"space-evenly\">\r\n                    <Grid>\r\n                        <Quote/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar';\nimport Body from './Body';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar/>\n      <Body/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}